<project name="devOpsAwsEc2Cli" default="go" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property environment="env" />
    <property file="build.properties" />
    <!--echo message="pathToSharedBuild = ${pathToSharedBuild}" /-->
    <import file="${pathToSharedBuild}/shared-build.xml" />
    
    <target name="-check-for-tools-ec2">
        <condition property="alreadyUnzipped_ec2" >
            <available
              file="${basedir}/${build.dir}/bin/ec2-api-tools"
              type="dir"
            />
        </condition>
    </target>
    <target name="-do-unzip-tools-ec2" depends="-check-for-tools-ec2" unless="alreadyUnzipped_ec2" >
        <mkdir dir="${basedir}/${build.dir}/bin" />
        <!--
        <unzip src="${basedir}/lib/ec2-api-tools.zip"
        -->
        
        <!--  -->
        
        <!--  
        <mkdir dir="${basedir}/${build.dir}/bin/tmp" />
        <unzip src="${basedir}/lib/tool/ec2-api-tools.zip"
          dest="${basedir}/${build.dir}/bin/tmp"
          >
        </unzip>
        <move 
            file="${basedir}/${build.dir}/bin/tmp/ec2-api-tools-${ec2ApiToolsRevision}"
          tofile="${basedir}/${build.dir}/bin/ec2-api-tools"
        />
        -->
        
        <!--  -->
        
        <unzip src="${basedir}/lib/tool/ec2-api-tools.zip"
          dest="${basedir}/${build.dir}/bin/ec2-api-tools"
          >
            <patternset>
                <include name="ec2-api-tools-${ec2ApiToolsRevision}/**"/>
            </patternset>
            <mapper>
                <globmapper from="ec2-api-tools-${ec2ApiToolsRevision}/*" to="*"/>
            </mapper>
        </unzip>
        
        <!--  -->
        
    </target>
    <target name="-unzip-tools-ec2" depends="-do-unzip-tools-ec2" >
        <property name="ec2Home" value="${basedir}/${build.dir}/bin/ec2-api-tools" />
        <chmod dir="${ec2Home}/bin" perm="ug+x" includes="**" >
        </chmod>
        <loadfile property="ec2AccessKey" srcFile="${ec2PrivatesFolder}/access" />
        <loadfile property="ec2SecretKey" srcFile="${ec2PrivatesFolder}/secret" />
        <path id="ec2.path">
            <pathelement location="${ec2Home}/bin" />
        </path>
        <path id="ec2.classpath">
          <pathelement location="${basedir}/lib/jar/joda-time.jar" />
          <!--
          <fileset dir="${basedir}/${build.dir}/lib">
            <include name="*.jar"/>
          </fileset>
          -->
        </path>
    </target>
    
    <target name="-check-for-tools-chef">
        <condition property="alreadyUnzipped_chef" >
            <available
              file="${basedir}/${build.dir}/bin/chef-dk"
              type="dir"
            />
        </condition>
    </target>
    <target name="-do-unzip-tools-chef" depends="-check-for-tools-chef" unless="alreadyUnzipped_chef" >
        <mkdir dir="${basedir}/${build.dir}/bin" />
        <untar src="${basedir}/lib/tool/chef-dk.tar.gz"
          dest="${basedir}/${build.dir}/bin/chef-dk"
          compression="gzip"
          >
            <patternset>
                <include name="chef-dk-${chef_revision}/**"/>
            </patternset>
            <mapper>
                <globmapper from="chef-dk-${chef_revision}/*" to="*"/>
            </mapper>
            <!--
            -->
        </untar>
    </target>
    <target name="-unzip-tools-chef" depends="-do-unzip-tools-chef" >
        <property name="chefHome" value="${basedir}/${build.dir}/bin/chef-dk" />
        <chmod dir="${chefHome}/bin" perm="ug+x" includes="**" >
        </chmod>
        <path id="chef.path">
            <pathelement location="${chefHome}/bin" />
        </path>
        <!--
        <path id="chef.classpath">
        </path>
        -->
        <echo file="${basedir}/${build.dir}/source_me.chef.sh" 
          message="export PATH=${toString:chef.path}:$$PATH"
        />
        
    </target>
    
    <target name="-compile" depends="-compile1, -compile2, -compile3" >
    <!--
    <target name="-compile" depends="-compile1, -compile2, -compile3" >
    -->
    </target>
    <target name="-compile1" depends="-unzip-tools-ec2, -unzip-tools-chef" >
        <echo message="Demonstrate Amazon EC2 command line power." />
        
        <path id="antpath.newpath" >
            <path refid="chef.path" />
            <path refid="ec2.path" />
            <pathelement location="${env.JAVA_HOME}/bin" />
            <pathelement path="${env.PATH}" />
        </path>
        <property name="orig.newpath" value="${ec2Home}/bin:${env.JAVA_HOME}/bin:${env.PATH}" />
        <!--
            ORIG NEW PATH               '${orig.newpath}'
            ANT PATH STRUCTURE NEW PATH '${toString:antpath.newpath}'
        -->
        <echo>
            Compare
        </echo>
        <mkdir dir="${build.dir}/tmp" />
        <echo file="${build.dir}/tmp/.orig.newpath" >${orig.newpath}</echo>
        <echo file="${build.dir}/tmp/.antpath.newpath" >${toString:antpath.newpath}</echo>
        <exec executable="bash" >
            <arg value="-c" />
            <arg value="cat ${build.dir}/tmp/.orig.newpath | tr ':' '\n' > ${build.dir}/tmp/orig.newpath" />
        </exec>
        <exec executable="bash" >
            <arg value="-c" />
            <arg value="cat ${build.dir}/tmp/.antpath.newpath | tr ':' '\n' > ${build.dir}/tmp/antpath.newpath" />
        </exec>
        <exec executable="diff" >
            <arg value="-dbB" />
            <arg value="${build.dir}/tmp/orig.newpath" />
            <arg value="${build.dir}/tmp/antpath.newpath" />
        </exec>
        
        <property name="env.CLASSPATH" value="${basedir}/lib" />
        <path id="antpath.newclasspath" >
            <path refid="ec2.classpath" />
            <pathelement path="${env.CLASSPATH}" />
        </path>
        
    </target>
    <target name="-compile2" depends="-compile1" >
        <echo message="ec2-describe-regions" />
        <!--
            <env key="CLASSPATH" value="${basedir}/lib/jar/joda-time.jar:${env.CLASSPATH}" />
        -->
        <exec executable="${ec2Home}/bin/ec2-describe-regions" >
            <env key="AWS_ACCESS_KEY" value="${ec2AccessKey}" />
            <env key="AWS_SECRET_KEY" value="${ec2SecretKey}" />
            <env key="JAVA_HOME" value="${env.JAVA_HOME}" />
            <env key="EC2_HOME" value="${ec2Home}" />
            <!--env key="PATH" value="${ec2Home}/bin:${env.JAVA_HOME}/bin:${env.PATH}" /-->
            <env key="PATH"      value="${toString:antpath.newpath}" />
            <!--env key="CLASSPATH" value="${basedir}/lib/jar/joda-time.jar:${basedir}/build/ec2-api-tools/lib/*.jar:${env.CLASSPATH}" /-->
            <env key="CLASSPATH" value="${toString:antpath.newclasspath}" />
        </exec>

    </target>
    <target name="-compile3" depends="-compile1" >
        <property name="ec2Url" value="https://${ec2RegionUrlDomain}" />
        <echo message="ec2Demo.sh" />
        <chmod file="${basedir}/scripts/ec2Demo.sh" perm="ug+rx" />
        <!--
        <exec executable="${basedir}/scripts/ec2Demo.sh" 
        <exec executable="bash" 
            <arg value="-c" />
            <arg value="${basedir}/scripts/ec2Demo.sh" />
        -->
            <exec executable="${basedir}/scripts/ec2Demo.sh" 
          output="${basedir}/build/ec2Demo.out"
          error="${basedir}/build/ec2Demo.err"
          failonerror="true"
          >
            
            <env key="AWS_ACCESS_KEY" value="${ec2AccessKey}" />
            <env key="AWS_SECRET_KEY" value="${ec2SecretKey}" />
            <env key="BUILD_DIR" value="${basedir}/${build.dir}" />
            <env key="EC2_HOME" value="${ec2Home}" />
            <env key="EC2_URL" value="${ec2Url}" />
            <env key="INSTANCE_TYPE" value="${ec2InstanceType}" />
            <env key="JAVA_HOME" value="${env.JAVA_HOME}" />
            <env key="USE_EC2_AMI" value="${ec2Ami}" />
            <env key="USE_THIS_SEC_GRP" value="${securityGroup}" />
            <!--env key="PATH" value="${ec2Home}/bin:${env.JAVA_HOME}/bin:${env.PATH}" /-->
            <env key="PATH"      value="${toString:antpath.newpath}" />
            <!--env key="CLASSPATH" value="${basedir}/lib/jar/joda-time.jar:${basedir}/build/ec2-api-tools/lib/*.jar:${env.CLASSPATH}" /-->
            <env key="CLASSPATH" value="${toString:antpath.newclasspath}" />
        </exec>

        <!--
        <exec executable="${ec2Home}/bin/ec2-run-instances" >
            <arg value="" />
            <env key="AWS_ACCESS_KEY" value="${ec2AccessKey}" />
            <env key="AWS_SECRET_KEY" value="${ec2SecretKey}" />
            <env key="JAVA_HOME" value="${env.JAVA_HOME}" />
            <env key="EC2_HOME" value="${ec2Home}" />
            <env key="PATH" value="${ec2Home}/bin:${env.JAVA_HOME}/bin:${env.PATH}" />
        </exec>
        -->
        
        <!--
        <echoproperties prefix="ivy">
        </echoproperties>
        -->
    </target>
    <target name="-compile-ivy-retrieve" >
        <ivy:retrieve
          pattern="${basedir}/lib/[type]/[artifact].[ext]"
          sync="true"
          symlink="true"
        />
        <ivy:resolve
          resolveId="my.ivy.resolve.com.amazon.aws_ec2-api-tools"
          inline="true"
          organisation="com.amazon.aws"
          module="ec2-api-tools"
          transitive="false"
          keep="true"
        />
        <ivy:artifactproperty name="ec2ApiToolsRevision" value="[revision]" 
          resolveId="my.ivy.resolve.com.amazon.aws_ec2-api-tools"
        />
        <echo message="ec2ApiToolsRevision = '${ec2ApiToolsRevision}'" />

        <ivy:resolve
          resolveId="my.ivy.resolve.io.chef_chef-dk"
          inline="true"
          organisation="io.chef"
          module="chef-dk"
          transitive="false"
          keep="true"
        />
        <ivy:artifactproperty name="chef_revision" value="[revision]" 
          resolveId="my.ivy.resolve.io.chef_chef-dk"
        />
        <echo message="chef_revision = '${chef_revision}'" />
    </target>
</project>
